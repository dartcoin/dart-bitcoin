syntax = "proto3";

package com.paycoin.data;
import "google/protobuf/descriptor.proto";

extend google.protobuf.MessageOptions {
    int32 my_message_option = 50001;
}

extend google.protobuf.FieldOptions {
    IndexOptions index = 50002;
}

extend google.protobuf.EnumOptions {
    bool my_enum_option = 50003;
}
extend google.protobuf.EnumValueOptions {
    uint32 my_enum_value_option = 50004;
}

//extend google.protobuf.ServiceOptions {
//    MyEnum my_service_option = 50005;
//}
//
//extend google.protobuf.MethodOptions {
//    MyMessage my_method_option = 50006;
//}

//enum IndexTypes {
//    option (my_enum_option) = true;
//
//    OPTION1 = 0 [(my_enum_value_option) = 321];
//    OPTION2 = 1;
//}
message IndexOptions {
    bool primary = 1;
    bool unique = 2;
    bool index = 3; // TODO index kan meerdere kolommen omvatte, dus message option van maken?, hoe verwijzen kolommen en hoe meerdere
}


message BlockMessage {
    option (my_message_option) = 1;
    uint64 height = 1 [(index).primary=true];
    BlockHeaderMessage header = 2;
    repeated TransactionMessage transactions = 3;
}

message BlockHeaderMessage {
    uint32 version = 1;
    bytes previousBlock = 2;
    bytes merkleRoot = 3;
    uint64 timestamp = 4;
    uint64 difficultyTarget = 5;
    uint64 nonce = 6;
}


message BloomFilterMessage {
    bytes data = 1;
    uint32 hashFuncs = 2;
    uint32 nTweak = 3;
    uint32 nFlags = 4;
}


message FilteredBlockMessage {
    BlockHeaderMessage header = 1;
    PartialMerkleTree merkleTree = 2;
}


message PartialMerkleTree {
    uint32 transactionCount = 1;

    // node-is-parent-of-matched-txid bits
    bytes matchedChildBits = 2;

    // txids and internal hashes
    repeated bytes hashes = 3;
}


message TransactionMessage {
    uint32 version = 1;
    repeated TransactionInputMessage inputs = 2;
    repeated TransactionOutputMessage outputs = 3;
    uint64 lockTime = 4;
}


message TransactionInputMessage {
    TransactionOutPointMessage outpoint = 1;
    Script scriptSig = 2;
    uint32 sequence = 3;
}


message TransactionOutPointMessage {
    bytes txid = 1;
    uint32 index = 2;
}


message TransactionOutputMessage {
    uint32 value = 1;
    Script scriptPubKey = 2;
}

message Operation {
    enum Code {
        option allow_alias = true;
        OP_FALSE = 0;
        OP_0 = 0;
        OP_PUSH1 = 1;
        OP_PUSH2 = 2;
        OP_PUSH3 = 3;
        OP_PUSH4 = 4;
        OP_PUSH5 = 5;
        OP_PUSH6 = 6;
        OP_PUSH7 = 7;
        OP_PUSH8 = 8;
        OP_PUSH9 = 9;
        OP_PUSH10 = 10;
        OP_PUSH11 = 11;
        OP_PUSH12 = 12;
        OP_PUSH13 = 13;
        OP_PUSH14 = 14;
        OP_PUSH15 = 15;
        OP_PUSH16 = 16;
        OP_PUSH17 = 17;
        OP_PUSH18 = 18;
        OP_PUSH19 = 19;
        OP_PUSH20 = 20;
        OP_PUSH21 = 21;
        OP_PUSH22 = 22;
        OP_PUSH23 = 23;
        OP_PUSH24 = 24;
        OP_PUSH25 = 25;
        OP_PUSH26 = 26;
        OP_PUSH27 = 27;
        OP_PUSH28 = 28;
        OP_PUSH29 = 29;
        OP_PUSH30 = 30;
        OP_PUSH31 = 31;
        OP_PUSH32 = 32;
        OP_PUSH33 = 33;
        OP_PUSH34 = 34;
        OP_PUSH35 = 35;
        OP_PUSH36 = 36;
        OP_PUSH37 = 37;
        OP_PUSH38 = 38;
        OP_PUSH39 = 39;
        OP_PUSH40 = 40;
        OP_PUSH41 = 41;
        OP_PUSH42 = 42;
        OP_PUSH43 = 43;
        OP_PUSH44 = 44;
        OP_PUSH45 = 45;
        OP_PUSH46 = 46;
        OP_PUSH47 = 47;
        OP_PUSH48 = 48;
        OP_PUSH49 = 49;
        OP_PUSH50 = 50;
        OP_PUSH51 = 51;
        OP_PUSH52 = 52;
        OP_PUSH53 = 53;
        OP_PUSH54 = 54;
        OP_PUSH55 = 55;
        OP_PUSH56 = 56;
        OP_PUSH57 = 57;
        OP_PUSH58 = 58;
        OP_PUSH59 = 59;
        OP_PUSH60 = 60;
        OP_PUSH61 = 61;
        OP_PUSH62 = 62;
        OP_PUSH63 = 63;
        OP_PUSH64 = 64;
        OP_PUSH65 = 65;
        OP_PUSH66 = 66;
        OP_PUSH67 = 67;
        OP_PUSH68 = 68;
        OP_PUSH69 = 69;
        OP_PUSH70 = 70;
        OP_PUSH71 = 71;
        OP_PUSH72 = 72;
        OP_PUSH73 = 73;
        OP_PUSH74 = 74;
        OP_PUSH75 = 75;
        OP_PUSHDATA = 76;
        OP_PUSHDATA2 = 77;
        OP_PUSHDATA4 = 78;
        OP_1NEGATE = 79;
        OP_RESERVED = 80;
        OP_TRUE = 81;
        OP_1 = 81;
        OP_2 = 82;
        OP_3 = 83;
        OP_4 = 84;
        OP_5 = 85;
        OP_6 = 86;
        OP_7 = 87;
        OP_8 = 88;
        OP_9 = 89;
        OP_10 = 90;
        OP_11 = 91;
        OP_12 = 92;
        OP_13 = 93;
        OP_14 = 94;
        OP_15 = 95;
        OP_16 = 96;
        OP_NOP = 97;
        OP_VER = 98;
        OP_IF = 99;
        OP_NOTIF = 100;
        OP_VERIF = 101;
        OP_VERNOTIF = 102;
        OP_ELSE = 103;
        OP_ENDIF = 104;
        OP_VERIFY = 105;
        OP_RETURN = 106;
        OP_TOALTSTACK = 107;
        OP_FROMALTSTACK = 108;
        OP_2DROP = 109;
        OP_2DUP = 110;
        OP_3DUP = 111;
        OP_2OVER = 112;
        OP_2ROT = 113;
        OP_2SWAP = 114;
        OP_IFDUP = 115;
        OP_DEPTH = 116;
        OP_DROP = 117;
        OP_DUP = 118;
        OP_NIP = 119;
        OP_OVER = 120;
        OP_PICK = 121;
        OP_ROLL = 122;
        OP_ROT = 123;
        OP_SWAP = 124;
        OP_TUCK = 125;
        OP_CAT = 126;
        OP_SUBSTR = 127;
        OP_LEFT = 128;
        OP_RIGHT = 129;
        OP_SIZE = 130;
        OP_INVERT = 131;
        OP_AND = 132;
        OP_OR = 133;
        OP_XOR = 134;
        OP_EQUAL = 135;
        OP_EQUALVERIFY = 136;
        OP_RESERVED1 = 137;
        OP_RESERVED2 = 138;
        OP_1ADD = 139;
        OP_1SUB = 140;
        OP_2MUL = 141;
        OP_2DIV = 142;
        OP_NEGATE = 143;
        OP_ABS = 144;
        OP_NOT = 145;
        OP_0NOTEQUAL = 146;
        OP_ADD = 147;
        OP_SUB = 148;
        OP_MUL = 149;
        OP_DIV = 150;
        OP_MOD = 151;
        OP_LSHIFT = 152;
        OP_RSHIFT = 153;
        OP_BOOLAND = 154;
        OP_BOOLOR = 155;
        OP_NUMEQUAL = 156;
        OP_NUMEQUALVERIFY = 157;
        OP_NUMNOTEQUAL = 158;
        OP_LESSTHAN = 159;
        OP_GREATERTHAN = 160;
        OP_LESSTHANOREQUAL = 161;
        OP_GREATERTHANOREQUAL = 162;
        OP_MIN = 163;
        OP_MAX = 164;
        OP_WITHIN = 165;
        OP_RIPEMD160 = 166;
        OP_SHA1 = 167;
        OP_SHA256 = 168;
        OP_HASH160 = 169;
        OP_HASH256 = 170;
        OP_CODESEPARATOR = 171;
        OP_CHECKSIG = 172;
        OP_CHECKSIGVERIFY = 173;
        OP_CHECKMULTISIG = 174;
        OP_CHECKMULTISIGVERIFY = 175;
        OP_NOP1 = 176;
        OP_NOP2 = 177;
        OP_NOP3 = 178;
        OP_NOP4 = 179;
        OP_NOP5 = 180;
        OP_NOP6 = 181;
        OP_NOP7 = 182;
        OP_NOP8 = 183;
        OP_NOP9 = 184;
        OP_NOP10 = 185;
        // Opcodes 186-252 are not defined
        // Pseudo-words:
        //		OP_PUBKEYHASH = 253;
        //		OP_PUBKEY = 254;
        //		OP_INVALIDOPCODE = 255;
    }
    Code opcode = 1;
    bytes data = 2;
}

message Script {
    repeated Operation operations = 1;
}

message Coinbase {
    uint32 version = 1;
    CoinbaseInput input = 2;
    repeated TransactionOutputMessage output = 3;
}

message CoinbaseInput {
    uint32 block_height = 1;
    bytes miner_data = 2;
    sint32 sequence = 3;
}


// Payment
message PaymentDetailsMessage {
    string network = 1; // "main" or "test"
    repeated TransactionOutputMessage outputs = 2;        // Where payment should be sent
    uint64 time = 3;           // Timestamp; when payment request created
    uint64 expires = 4;        // Timestamp; when this request should be considered invalid
    string memo = 5;           // Human-readable description of request for the customer
    string payment_url = 6;    // URL to send Payment and get PaymentACK
    bytes merchant_data = 7;   // Arbitrary data to include in the Payment message
}
message PaymentRequestMessage {
    uint32 payment_details_version = 1;
    string pki_type = 2;  // none / x509+sha256 / x509+sha1
    bytes pki_data = 3;                      // depends on pki_type
    bytes serialized_payment_details = 4;    // PaymentDetails
    bytes signature = 5;                     // pki-dependent signature
}
message X509CertificatesMessage {
    repeated bytes certificate = 1;    // DER-encoded X.509 certificate chain
}
message PaymentMessage {
    bytes merchant_data = 1;  // From PaymentDetails.merchant_data
    repeated bytes transactions = 2;   // Signed transactions that satisfy PaymentDetails.outputs
    repeated TransactionOutputMessage refund_to = 3;     // Where to send refunds, if a refund is necessary
    string memo = 4;          // Human-readable message for the merchant
}
message PaymentACKMessate {
    PaymentMessage payment = 1;      // Payment message that triggered this ACK
    string memo = 2;          // human-readable message for customer
}